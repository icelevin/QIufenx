package com.hb.utils.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hb.utils.modle.login.Passport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSPORT".
*/
public class PassportDao extends AbstractDao<Passport, String> {

    public static final String TABLENAME = "PASSPORT";

    /**
     * Properties of entity Passport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PassportId = new Property(0, String.class, "PassportId", true, "PASSPORT_ID");
        public final static Property PassportName = new Property(1, String.class, "PassportName", false, "PASSPORT_NAME");
        public final static Property AuthenPhone = new Property(2, String.class, "AuthenPhone", false, "AUTHEN_PHONE");
        public final static Property AuthenIdCode = new Property(3, String.class, "AuthenIdCode", false, "AUTHEN_ID_CODE");
    }


    public PassportDao(DaoConfig config) {
        super(config);
    }
    
    public PassportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSPORT\" (" + //
                "\"PASSPORT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: PassportId
                "\"PASSPORT_NAME\" TEXT," + // 1: PassportName
                "\"AUTHEN_PHONE\" TEXT," + // 2: AuthenPhone
                "\"AUTHEN_ID_CODE\" TEXT);"); // 3: AuthenIdCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSPORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Passport entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String PassportName = entity.getPassportName();
        if (PassportName != null) {
            stmt.bindString(2, PassportName);
        }
 
        String AuthenPhone = entity.getAuthenPhone();
        if (AuthenPhone != null) {
            stmt.bindString(3, AuthenPhone);
        }
 
        String AuthenIdCode = entity.getAuthenIdCode();
        if (AuthenIdCode != null) {
            stmt.bindString(4, AuthenIdCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Passport entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String PassportName = entity.getPassportName();
        if (PassportName != null) {
            stmt.bindString(2, PassportName);
        }
 
        String AuthenPhone = entity.getAuthenPhone();
        if (AuthenPhone != null) {
            stmt.bindString(3, AuthenPhone);
        }
 
        String AuthenIdCode = entity.getAuthenIdCode();
        if (AuthenIdCode != null) {
            stmt.bindString(4, AuthenIdCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Passport readEntity(Cursor cursor, int offset) {
        Passport entity = new Passport( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PassportId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PassportName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AuthenPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // AuthenIdCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Passport entity, int offset) {
        entity.setPassportId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassportName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthenPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthenIdCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Passport entity, long rowId) {
        return entity.getPassportId();
    }
    
    @Override
    public String getKey(Passport entity) {
        if(entity != null) {
            return entity.getPassportId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Passport entity) {
        return entity.getPassportId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
