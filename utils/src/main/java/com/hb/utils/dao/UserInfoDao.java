package com.hb.utils.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hb.utils.modle.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PassportId = new Property(0, String.class, "PassportId", true, "PASSPORT_ID");
        public final static Property RealName = new Property(1, String.class, "RealName", false, "REAL_NAME");
        public final static Property CellPhone = new Property(2, String.class, "CellPhone", false, "CELL_PHONE");
        public final static Property Sex = new Property(3, String.class, "Sex", false, "SEX");
        public final static Property SexName = new Property(4, String.class, "SexName", false, "SEX_NAME");
        public final static Property Icon = new Property(5, String.class, "Icon", false, "ICON");
        public final static Property IsAuthen = new Property(6, String.class, "IsAuthen", false, "IS_AUTHEN");
        public final static Property NickName = new Property(7, String.class, "NickName", false, "NICK_NAME");
        public final static Property Email = new Property(8, String.class, "Email", false, "EMAIL");
        public final static Property LoginName = new Property(9, String.class, "LoginName", false, "LOGIN_NAME");
        public final static Property RegisterTime = new Property(10, String.class, "RegisterTime", false, "REGISTER_TIME");
        public final static Property IdType = new Property(11, String.class, "IdType", false, "ID_TYPE");
        public final static Property IdTypeText = new Property(12, String.class, "IdTypeText", false, "ID_TYPE_TEXT");
        public final static Property IdNum = new Property(13, String.class, "IdNum", false, "ID_NUM");
        public final static Property PatientId = new Property(14, String.class, "PatientId", false, "PATIENT_ID");
        public final static Property AuthenPhone = new Property(15, String.class, "AuthenPhone", false, "AUTHEN_PHONE");
        public final static Property AuthenEmail = new Property(16, String.class, "AuthenEmail", false, "AUTHEN_EMAIL");
        public final static Property BirthDay = new Property(17, String.class, "BirthDay", false, "BIRTH_DAY");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"PASSPORT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: PassportId
                "\"REAL_NAME\" TEXT," + // 1: RealName
                "\"CELL_PHONE\" TEXT," + // 2: CellPhone
                "\"SEX\" TEXT," + // 3: Sex
                "\"SEX_NAME\" TEXT," + // 4: SexName
                "\"ICON\" TEXT," + // 5: Icon
                "\"IS_AUTHEN\" TEXT," + // 6: IsAuthen
                "\"NICK_NAME\" TEXT," + // 7: NickName
                "\"EMAIL\" TEXT," + // 8: Email
                "\"LOGIN_NAME\" TEXT," + // 9: LoginName
                "\"REGISTER_TIME\" TEXT," + // 10: RegisterTime
                "\"ID_TYPE\" TEXT," + // 11: IdType
                "\"ID_TYPE_TEXT\" TEXT," + // 12: IdTypeText
                "\"ID_NUM\" TEXT," + // 13: IdNum
                "\"PATIENT_ID\" TEXT," + // 14: PatientId
                "\"AUTHEN_PHONE\" TEXT," + // 15: AuthenPhone
                "\"AUTHEN_EMAIL\" TEXT," + // 16: AuthenEmail
                "\"BIRTH_DAY\" TEXT);"); // 17: BirthDay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(2, RealName);
        }
 
        String CellPhone = entity.getCellPhone();
        if (CellPhone != null) {
            stmt.bindString(3, CellPhone);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(4, Sex);
        }
 
        String SexName = entity.getSexName();
        if (SexName != null) {
            stmt.bindString(5, SexName);
        }
 
        String Icon = entity.getIcon();
        if (Icon != null) {
            stmt.bindString(6, Icon);
        }
 
        String IsAuthen = entity.getIsAuthen();
        if (IsAuthen != null) {
            stmt.bindString(7, IsAuthen);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(8, NickName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(9, Email);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(10, LoginName);
        }
 
        String RegisterTime = entity.getRegisterTime();
        if (RegisterTime != null) {
            stmt.bindString(11, RegisterTime);
        }
 
        String IdType = entity.getIdType();
        if (IdType != null) {
            stmt.bindString(12, IdType);
        }
 
        String IdTypeText = entity.getIdTypeText();
        if (IdTypeText != null) {
            stmt.bindString(13, IdTypeText);
        }
 
        String IdNum = entity.getIdNum();
        if (IdNum != null) {
            stmt.bindString(14, IdNum);
        }
 
        String PatientId = entity.getPatientId();
        if (PatientId != null) {
            stmt.bindString(15, PatientId);
        }
 
        String AuthenPhone = entity.getAuthenPhone();
        if (AuthenPhone != null) {
            stmt.bindString(16, AuthenPhone);
        }
 
        String AuthenEmail = entity.getAuthenEmail();
        if (AuthenEmail != null) {
            stmt.bindString(17, AuthenEmail);
        }
 
        String BirthDay = entity.getBirthDay();
        if (BirthDay != null) {
            stmt.bindString(18, BirthDay);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(2, RealName);
        }
 
        String CellPhone = entity.getCellPhone();
        if (CellPhone != null) {
            stmt.bindString(3, CellPhone);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(4, Sex);
        }
 
        String SexName = entity.getSexName();
        if (SexName != null) {
            stmt.bindString(5, SexName);
        }
 
        String Icon = entity.getIcon();
        if (Icon != null) {
            stmt.bindString(6, Icon);
        }
 
        String IsAuthen = entity.getIsAuthen();
        if (IsAuthen != null) {
            stmt.bindString(7, IsAuthen);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(8, NickName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(9, Email);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(10, LoginName);
        }
 
        String RegisterTime = entity.getRegisterTime();
        if (RegisterTime != null) {
            stmt.bindString(11, RegisterTime);
        }
 
        String IdType = entity.getIdType();
        if (IdType != null) {
            stmt.bindString(12, IdType);
        }
 
        String IdTypeText = entity.getIdTypeText();
        if (IdTypeText != null) {
            stmt.bindString(13, IdTypeText);
        }
 
        String IdNum = entity.getIdNum();
        if (IdNum != null) {
            stmt.bindString(14, IdNum);
        }
 
        String PatientId = entity.getPatientId();
        if (PatientId != null) {
            stmt.bindString(15, PatientId);
        }
 
        String AuthenPhone = entity.getAuthenPhone();
        if (AuthenPhone != null) {
            stmt.bindString(16, AuthenPhone);
        }
 
        String AuthenEmail = entity.getAuthenEmail();
        if (AuthenEmail != null) {
            stmt.bindString(17, AuthenEmail);
        }
 
        String BirthDay = entity.getBirthDay();
        if (BirthDay != null) {
            stmt.bindString(18, BirthDay);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PassportId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RealName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CellPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // SexName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // IsAuthen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // LoginName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // RegisterTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // IdType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // IdTypeText
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // IdNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PatientId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // AuthenPhone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // AuthenEmail
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // BirthDay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setPassportId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRealName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCellPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSexName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAuthen(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLoginName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRegisterTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIdType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIdTypeText(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIdNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPatientId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAuthenPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAuthenEmail(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBirthDay(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getPassportId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getPassportId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getPassportId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
