package com.hb.utils.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hb.utils.modle.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PassportId = new Property(0, String.class, "PassportId", true, "PASSPORT_ID");
        public final static Property LoginName = new Property(1, String.class, "LoginName", false, "LOGIN_NAME");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "USER_NAME");
        public final static Property UserToken = new Property(3, String.class, "UserToken", false, "USER_TOKEN");
        public final static Property IsLogin = new Property(4, boolean.class, "isLogin", false, "IS_LOGIN");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"PASSPORT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: PassportId
                "\"LOGIN_NAME\" TEXT," + // 1: LoginName
                "\"USER_NAME\" TEXT," + // 2: UserName
                "\"USER_TOKEN\" TEXT," + // 3: UserToken
                "\"IS_LOGIN\" INTEGER NOT NULL );"); // 4: isLogin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserToken = entity.getUserToken();
        if (UserToken != null) {
            stmt.bindString(4, UserToken);
        }
        stmt.bindLong(5, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String PassportId = entity.getPassportId();
        if (PassportId != null) {
            stmt.bindString(1, PassportId);
        }
 
        String LoginName = entity.getLoginName();
        if (LoginName != null) {
            stmt.bindString(2, LoginName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserToken = entity.getUserToken();
        if (UserToken != null) {
            stmt.bindString(4, UserToken);
        }
        stmt.bindLong(5, entity.getIsLogin() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // PassportId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LoginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserToken
            cursor.getShort(offset + 4) != 0 // isLogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setPassportId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsLogin(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getPassportId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getPassportId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getPassportId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
